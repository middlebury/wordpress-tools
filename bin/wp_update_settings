#!/usr/bin/env php
<?php

//Note: Visiting sites imported into DEV before running this script can result in lost settings. Run this script immediately after importing tables to avoid losing settings.

$usage = <<<END
Usage: $argv[0] <config-section> [site-id]

END;

$config_section = $argv[1];
if (empty($config_section) || $argc > 3) {
	fwrite(STDERR, $usage);
	exit(1);
}

$ini = parse_ini_file(dirname(dirname(__FILE__)).'/config.ini', true);
global $dev_uri, $prod_uri;
if (empty($ini[$config_section])) {
	fwrite(STDERR, $usage);
	fwrite(STDERR, "Config section, [$config_section], was not found in the ini file.");
	exit(1);
}

$dev_http_host = $ini[$config_section]['dev_http_host'];
if (empty($dev_http_host)) {
	fwrite(STDERR, $usage);
	fwrite(STDERR, "config.ini [$config_section] must have dev_http_host defined.");
	exit(2);
}
$dev_http_path = $ini[$config_section]['dev_http_path'];
if (empty($dev_http_path)) {
	fwrite(STDERR, $usage);
	fwrite(STDERR, "config.ini [$config_section] must have dev_http_path defined.");
	exit(2);
}
$dev_uri = $dev_http_host.rtrim($dev_http_path, '/');

$prod_http_host = $ini[$config_section]['prod_http_host'];
if (empty($prod_http_host)) {
	fwrite(STDERR, $usage);
	fwrite(STDERR, "config.ini [$config_section] must have prod_http_host defined.");
	exit(2);
}
$prod_http_path = $ini[$config_section]['prod_http_path'];
if (empty($prod_http_path)) {
	fwrite(STDERR, $usage);
	fwrite(STDERR, "config.ini [$config_section] must have prod_http_path defined.");
	exit(2);
}
$prod_uri = $prod_http_host.rtrim($prod_http_path, '/');

//Connect
$connection = db_connect($ini[$config_section]['dev_db_user'], $ini[$config_section]['dev_db_password'], $ini[$config_section]['dev_db_host'], $ini[$config_section]['dev_db_database']);

//Use argument for single table
if (isset($argv[2])) {
  $site_id = $argv[2];
  // Verify that this is an int.
  if (!preg_match('/^[0-9]+$/', $site_id)) {
  	fwrite(STDERR, $usage);
	fwrite(STDERR, "Site-id, $site_id, must be an integer.");
	db_disconnect();
	exit(1);
  }

  //get argument as array with single value
  $options_tables = array('wp_'.$site_id.'_options');

  //else apply to all options tables
} else {

	//Get list of wp_XX_options tables
	$options_tables = get_tables($connection, DB);
  //$refresh = true;*/
}

//Loop through options tables and select widget/theme settings
foreach($options_tables as $options_table) {

	$sql = 'SELECT
						*
					FROM
						'.$options_table.'
					WHERE
						(option_name LIKE "%widget%"
					AND
						option_value LIKE "%'.$dev_http_host.'%")
					OR
						(option_name LIKE "%theme%"
					AND
						option_value LIKE "%'.$dev_http_host.'%");';

	//Swap back in the live URLs
	foreach ($connection->query($sql) as $row) {
   	$results[$options_table][$row['option_name']] = str_replace($dev_uri, $prod_uri,$row['option_value']);
  }
}

//Loop through options tables and disable certain plugins
foreach($options_tables as $options_table) {

	$sql = "SELECT * FROM " . $options_table . " WHERE option_name='active_plugins'";

	foreach ($connection->query($sql) as $row) {
		$plugins = unserialize($row['option_value']);
		$plugins = array_diff($plugins, array(
			"email-users/email-users.php",
			"jetpack/jetpack.php",
			"subscribe2/subscribe2.php",
                        "wordpress-mu-domain-mapping/domain_mapping.php",
		));

		$results[$options_table][$row['option_name']] = serialize($plugins);
	}
}

//var_dump($results['wp_813_options']);

if (!isset($results)) {
	print "No options to update.\n";
	db_disconnect();
	die();
}

//Unserialise the data
foreach ($results as &$result) {
	foreach ($result as &$serialized_string){
		if (is_string($serialized_string)) {
			$serialized_string = unserialize($serialized_string);
		}
	}
}

//Swap the DEV URLs back in
array_walk_recursive($results, 'url_swap');

//Re-serialise the data
foreach ($results as &$result) {
	foreach ($result as &$unserialized_array){
		$unserialized_array = serialize($unserialized_array);
	}
}

//insert the updated strings
foreach ($results as $table => $options) {

	foreach ($options as $name => $value){

		$sql = $connection->prepare("UPDATE ".$table." SET option_value = ? WHERE option_name = ?");

		if ($sql->execute(array($value, $name))) {
			print "Updated ". $table . " " .$name. ".\n";
		} else {
			print "Error updating ". $table . " " .$name. ".\n";
		}
	}
}

// Network-Deactivate the wordpress-mu-domain-mapping plugin since it will throw
// errors on sub-path installations like in development.
$sql = "SELECT * FROM wp_sitemeta WHERE meta_key='active_sitewide_plugins'";
$update = $connection->prepare("UPDATE wp_sitemeta SET meta_value = :value WHERE meta_id = :id");
foreach ($connection->query($sql) as $row) {
  $plugins = unserialize($row['meta_value']);
  unset($plugins["wordpress-mu-domain-mapping/domain_mapping.php"]);
  $update->execute(array(':value' => serialize($plugins), ':id' => $row['meta_id']));
}

//Disconnect
db_disconnect();

//Helper functions

//Swap out the LIVE URLs for the DEV ones
function url_swap(&$value, $key) {
	global $dev_uri, $prod_uri;
	if (is_string($value)) {
// 		echo "$key\n\tOld:\t$value";
		$value = str_ireplace($prod_uri,$dev_uri,$value);
// 		echo "\n\tnew:\t$value\n";
	}
}

//Connect to the DB (encorce UTF8)
function db_connect($user, $pass, $host, $db) {
  try {
    $dbh = new PDO('mysql:host='.$host.';dbname='.$db, $user, $pass, array(PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES \'UTF8\''));
    print "connected\n";
    return $dbh;
  } catch (PDOException $e) {
    print "Error!: " . $e->getMessage() . "<br/>";
    die();
  }
}

//Disconnect from the DB
function db_disconnect() {
  $dbh = null;
  print "disconnected\n";
}

//Get all WP options tables
function get_tables($dbh, $db) {
  $sql = 'SHOW TABLES FROM '.$db.' LIKE "%_options"';
  $options_tables = array();
  foreach ($dbh->query($sql) as $row) {
    $options_tables[] = $row[0];
  }
  if (!empty($options_tables)) {
    return $options_tables;
  } else {
    print "No tables";
    die();
  }
}
